// SportsTalent AI - Complete Demo Application - FIXED VERSION
// Optimized for Entry-Level Smartphones with Full Feature Set

// Application State Management
const appState = {
  currentRole: null,
  currentLanguage: 'en',
  currentRegStep: 1,
  currentTab: 'home',
  currentOfficialTab: 'athletes',
  isRecording: false,
  isOnline: false,
  storageUsed: 145, // MB
  storageTotal: 2048, // MB (2GB)
  
  // Default athlete data (as per requirements)
  athlete: {
    name: 'demo_athlete',
    age: 15,
    state: 'Tamil Nadu', 
    district: 'Trichy',
    sport: 'Any',
    aadhaarLast4: '1234',
    overallScore: 87,
    testsCompleted: 8,
    testsTotal: 10,
    mobile: '9876543210',
    email: 'demo_athlete@gmail.com'
  },
  
  // Official data
  official: {
    name: 'Official Admin',
    organization: 'Sports Authority of India',
    region: 'Tamil Nadu',
    email: 'official@sai.gov.in'
  },
  
  // Performance data for charts (only for athletes)
  performanceData: {
    radar: [85, 78, 92, 88, 76, 94], // Speed, Strength, Endurance, Flexibility, Power, Agility
    progress: [65, 70, 75, 80, 85, 87] // Progress over time
  },
  
  // Chat responses in multiple languages
  chatResponses: {
    en: {
      recording: "üìπ Recording Guide:\n‚Ä¢ Position phone 2m away at chest height\n‚Ä¢ Ensure good lighting, avoid shadows\n‚Ä¢ Follow on-screen pose guide exactly\n‚Ä¢ Keep phone steady (use stand if available)\n‚Ä¢ AI will provide real-time feedback",
      storage: "üíæ Smart Storage Management:\n‚Ä¢ Videos auto-delete after cloud sync\n‚Ä¢ Smart compression saves 60% space\n‚Ä¢ Keep only essential data offline\n‚Ä¢ Sync happens automatically with WiFi\n‚Ä¢ Total app size under 200MB",
      offline: "üì∂ Offline Features:\n‚Ä¢ Full AI analysis works without internet\n‚Ä¢ All tests can be recorded offline\n‚Ä¢ Data syncs when connection available\n‚Ä¢ Pose detection runs on-device\n‚Ä¢ Performance tracking continues offline",
      performance: "üìä Performance Insights:\n‚Ä¢ Your overall score: 87/100 (Excellent)\n‚Ä¢ Strengths: Speed & Power (90+ percentile)\n‚Ä¢ Focus areas: Flexibility & Core strength\n‚Ä¢ Improvement trend: +5 points this month\n‚Ä¢ Elite potential: 94% confidence"
    },
    hi: {
      recording: "üìπ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§ó‡§æ‡§á‡§°:\n‚Ä¢ ‡§´‡•ã‡§® ‡§ï‡•ã 2 ‡§Æ‡•Ä‡§ü‡§∞ ‡§¶‡•Ç‡§∞ ‡§õ‡§æ‡§§‡•Ä ‡§ï‡•Ä ‡§ä‡§Ç‡§ö‡§æ‡§à ‡§™‡§∞ ‡§∞‡§ñ‡•á‡§Ç\n‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∞‡•ã‡§∂‡§®‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç, ‡§õ‡§æ‡§Ø‡§æ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç\n‚Ä¢ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞ ‡§¶‡§ø‡§è ‡§ó‡§è ‡§™‡•ã‡§ú‡§º ‡§ó‡§æ‡§á‡§° ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§´‡•ã‡§® ‡§ï‡•ã ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§∞‡§ñ‡•á‡§Ç (‡§∏‡•ç‡§ü‡•à‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç)\n‚Ä¢ AI ‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§¶‡•á‡§ó‡§æ",
      storage: "üíæ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®:\n‚Ä¢ ‡§ï‡•ç‡§≤‡§æ‡§â‡§° ‡§∏‡§ø‡§Ç‡§ï ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§°‡§ø‡§≤‡•Ä‡§ü\n‚Ä¢ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡§Æ‡•ç‡§™‡•ç‡§∞‡•á‡§∂‡§® ‡§∏‡•á 60% ‡§∏‡•ç‡§•‡§æ‡§® ‡§¨‡§ö‡§æ‡§§‡§æ ‡§π‡•à\n‚Ä¢ ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§°‡•á‡§ü‡§æ ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à\n‚Ä¢ WiFi ‡§∏‡•á ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§∏‡§ø‡§Ç‡§ï ‡§π‡•ã‡§§‡§æ ‡§π‡•à\n‚Ä¢ ‡§ï‡•Å‡§≤ ‡§ê‡§™ ‡§∏‡§æ‡§á‡§ú‡§º 200MB ‡§∏‡•á ‡§ï‡§Æ",
      offline: "üì∂ ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç:\n‚Ä¢ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ AI ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£\n‚Ä¢ ‡§∏‡§≠‡•Ä ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç\n‚Ä¢ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡§ø‡§≤‡§®‡•á ‡§™‡§∞ ‡§°‡•á‡§ü‡§æ ‡§∏‡§ø‡§Ç‡§ï ‡§π‡•ã‡§§‡§æ ‡§π‡•à\n‚Ä¢ ‡§™‡•ã‡§ú‡§º ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§∂‡§® ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§™‡§∞ ‡§ö‡§≤‡§§‡§æ ‡§π‡•à\n‚Ä¢ ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§π‡§§‡•Ä ‡§π‡•à",
      performance: "üìä ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø:\n‚Ä¢ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§ï‡•ã‡§∞: 87/100 (‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü)\n‚Ä¢ ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§™‡§ï‡•ç‡§∑: ‡§ó‡§§‡§ø ‡§î‡§∞ ‡§∂‡§ï‡•ç‡§§‡§ø (90+ ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§‡§ï)\n‚Ä¢ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: ‡§≤‡§ö‡•Ä‡§≤‡§æ‡§™‡§® ‡§î‡§∞ ‡§ï‡•ã‡§∞ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§Ç‡§•\n‚Ä¢ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø: ‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á +5 ‡§Ö‡§Ç‡§ï\n‚Ä¢ ‡§è‡§≤‡•Ä‡§ü ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ: 94% ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏"
    }
  }
};

// Initialize application when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  console.log('üèÜ SportsTalent AI - Complete Demo Starting...');
  initializeApplication();
});

// Main initialization function
function initializeApplication() {
  try {
    setupEventListeners();
    setupOTPInputs();
    setupFormValidation();
    simulateNetworkStatus();
    
    // Initialize welcome page
    showPage('welcome-page');
    
    console.log('‚úÖ Application initialized successfully');
    console.log('üì± Optimized for entry-level smartphones');
    console.log('üåê Multi-language support enabled');
    console.log('ü§ñ AI features ready');
    
  } catch (error) {
    console.error('‚ùå Initialization error:', error);
    showErrorMessage('Application failed to initialize. Please refresh the page.');
  }
}

// Event Listeners Setup
function setupEventListeners() {
  // Global click handler for navigation
  document.addEventListener('click', function(event) {
    // Handle bottom navigation clicks
    if (event.target.closest('.nav-btn')) {
      const navBtn = event.target.closest('.nav-btn');
      const tabName = navBtn.getAttribute('data-tab');
      if (tabName) {
        event.preventDefault();
        event.stopPropagation();
        switchTab(tabName);
        return;
      }
    }
    
    // Handle modal close buttons
    if (event.target.closest('.modal-close')) {
      event.preventDefault();
      const modal = event.target.closest('.modal');
      if (modal) {
        modal.classList.add('hidden');
      }
      return;
    }
    
    // Handle clicks outside modals to close them
    if (event.target.classList.contains('modal')) {
      event.target.classList.add('hidden');
    }
  });
  
  // Keyboard shortcuts
  document.addEventListener('keydown', function(event) {
    // Escape key to close modals
    if (event.key === 'Escape') {
      closeAllModals();
      return;
    }
  });
  
  // Chat input enter key
  const chatInput = document.getElementById('chat-input');
  if (chatInput) {
    chatInput.addEventListener('keypress', function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        sendMessage();
      }
    });
  }
  
  // Form submissions
  document.addEventListener('submit', function(event) {
    event.preventDefault();
    console.log('Form submission intercepted for demo');
  });
  
  console.log('üì° Event listeners configured');
}

// Navigation Functions
function showPage(pageId) {
  try {
    // Hide all pages
    document.querySelectorAll('.page').forEach(page => {
      page.classList.remove('active');
    });
    
    // Show target page
    const targetPage = document.getElementById(pageId);
    if (targetPage) {
      targetPage.classList.add('active');
      console.log('üìÑ Navigated to:', pageId);
      
      // Special handling for athlete dashboard - CRITICAL FIX
      if (pageId === 'athlete-dashboard') {
        setTimeout(() => {
          // Ensure bottom nav is visible and working
          const bottomNav = document.querySelector('.bottom-nav');
          if (bottomNav) {
            bottomNav.style.display = 'flex';
            bottomNav.style.position = 'fixed';
            bottomNav.style.bottom = '0';
            bottomNav.style.left = '0';
            bottomNav.style.right = '0';
            bottomNav.style.zIndex = '200';
          }
          
          // Initialize with home tab
          if (appState.currentTab) {
            switchTab(appState.currentTab);
          } else {
            switchTab('home');
          }
        }, 100);
      }
      
      // Update role indicator if on login/registration page
      if (pageId === 'login-page' || pageId === 'registration-page') {
        updateRoleIndicator();
      }
      
    } else {
      console.error('‚ùå Page not found:', pageId);
    }
  } catch (error) {
    console.error('‚ùå Navigation error:', error);
  }
}

// Role and Page Navigation
function showWelcomePage() {
  showPage('welcome-page');
  appState.currentRole = null;
  console.log('üè† Returned to welcome page');
}

function selectRole(role) {
  appState.currentRole = role;
  console.log('üë§ Selected role:', role);
  showLoginPage();
}

function showLoginPage() {
  showPage('login-page');
  updateLoginPage();
  console.log('üîë Showing login page');
}

function updateLoginPage() {
  const athleteLogin = document.getElementById('athlete-login');
  const officialLogin = document.getElementById('official-login');
  
  if (appState.currentRole === 'athlete') {
    if (athleteLogin) athleteLogin.classList.add('active');
    if (officialLogin) officialLogin.classList.remove('active');
  } else {
    if (athleteLogin) athleteLogin.classList.remove('active');
    if (officialLogin) officialLogin.classList.add('active');
  }
}

function showUidaiTutorial() {
  showPage('uidai-tutorial-page');
  console.log('üìö Showing UIDAI tutorial');
}

function showRecordingTutorial() {
  showPage('recording-tutorial-page');
  console.log('üé• Showing recording tutorial');
}

function showRegistrationPage() {
  showPage('registration-page');
  resetRegistration();
  console.log('üìù Starting registration process');
}

function startPracticeMode() {
  showInfoModal(
    'üéØ Practice Recording Mode',
    `<div class="practice-mode">
      <h4>üé¨ Interactive Practice Session</h4>
      <p>Practice mode helps you achieve 95%+ setup quality scores for optimal AI analysis!</p>
      <div class="practice-benefits">
        <h5>‚ú® Practice Mode Benefits:</h5>
        <ul>
          <li>üéØ No data usage - completely offline</li>
          <li>üîÑ Unlimited attempts to perfect your setup</li>
          <li>ü§ñ Real-time AI feedback and guidance</li>
          <li>üìä Setup quality scoring and tips</li>
        </ul>
      </div>
    </div>`
  );
}

// Login Functions - FIXED
function switchLoginMethod(method) {
  const usernameLogin = document.getElementById('username-login');
  const mobileLogin = document.getElementById('mobile-login');
  const methodBtns = document.querySelectorAll('.method-btn');
  
  // Update button states
  methodBtns.forEach(btn => {
    btn.classList.toggle('active', btn.textContent.toLowerCase().includes(method));
  });
  
  // Update login method visibility
  if (usernameLogin && mobileLogin) {
    if (method === 'username') {
      usernameLogin.classList.add('active');
      mobileLogin.classList.remove('active');
    } else {
      usernameLogin.classList.remove('active');
      mobileLogin.classList.add('active');
    }
  }
  
  console.log('üîÑ Switched to login method:', method);
}

function sendOTPToMobile() {
  const mobile = document.getElementById('athlete-mobile').value;
  if (!mobile) {
    showErrorMessage('Please enter your mobile number');
    return;
  }
  
  // Show OTP section
  const otpSection = document.getElementById('otp-section');
  if (otpSection) {
    otpSection.classList.remove('hidden');
  }
  
  // Auto-fill demo OTP
  setTimeout(() => {
    const otpBoxes = document.querySelectorAll('#otp-section .otp-box');
    '0000'.split('').forEach((digit, index) => {
      if (otpBoxes[index]) {
        otpBoxes[index].value = digit;
      }
    });
    showInfoMessage('üì± Demo OTP auto-filled: 0000');
  }, 1500);
  
  showInfoMessage('üì± OTP sent to ' + mobile);
  
  // Update button
  const sendBtn = document.getElementById('send-otp-btn');
  if (sendBtn) {
    sendBtn.textContent = 'Resend OTP';
    sendBtn.classList.remove('btn--secondary');
    sendBtn.classList.add('btn--outline');
  }
}

function loginAthlete(method) {
  let isValid = false;
  
  if (method === 'username') {
    const username = document.getElementById('athlete-username').value;
    const password = document.getElementById('athlete-password').value;
    
    if (username === 'demo_athlete' && password === '1234') {
      isValid = true;
    } else {
      showErrorMessage('Invalid username or password. Use: demo_athlete / 1234');
      return;
    }
  } else if (method === 'mobile') {
    const otpBoxes = document.querySelectorAll('#otp-section .otp-box');
    const otp = Array.from(otpBoxes).map(box => box.value).join('');
    
    if (otp === '0000') {
      isValid = true;
    } else {
      showErrorMessage('Invalid OTP. Demo OTP is: 0000');
      return;
    }
  }
  
  if (isValid) {
    console.log('‚úÖ Athlete login successful');
    showInfoMessage('üéâ Login successful! Welcome ' + appState.athlete.name);
    setTimeout(() => {
      showPage('athlete-dashboard');
      // Force bottom navigation to be visible and working
      setTimeout(() => {
        ensureBottomNavigation();
        switchTab('home');
      }, 200);
    }, 1000);
  }
}

// FIXED: Official login function
function loginOfficial() {
  const username = document.getElementById('official-username').value;
  const password = document.getElementById('official-password').value;
  
  // Clear any input artifacts
  const cleanUsername = username.trim();
  const cleanPassword = password.trim();
  
  console.log('Debug - Username:', cleanUsername, 'Password:', cleanPassword);
  
  if (cleanUsername === 'official_admin' && cleanPassword === 'admin') {
    console.log('‚úÖ Official login successful');
    showInfoMessage('üéâ Login successful! Welcome Official Admin');
    setTimeout(() => {
      showPage('official-dashboard');
      switchOfficialTab('athletes');
    }, 1000);
  } else {
    showErrorMessage('Invalid username or password. Use: official_admin / admin');
    console.log('‚ùå Login failed. Expected: official_admin/admin, Got:', cleanUsername + '/' + cleanPassword);
  }
}

// CRITICAL FIX: Bottom Navigation
function ensureBottomNavigation() {
  const bottomNav = document.querySelector('.bottom-nav');
  if (!bottomNav) {
    console.error('‚ùå Bottom navigation not found');
    return;
  }
  
  // Force proper styles and visibility
  bottomNav.style.cssText = `
    position: fixed !important;
    bottom: 0 !important;
    left: 0 !important;
    right: 0 !important;
    z-index: 200 !important;
    display: flex !important;
    visibility: visible !important;
    background: var(--color-surface) !important;
    border-top: 1px solid var(--color-border) !important;
    box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1) !important;
  `;
  
  // Ensure all nav buttons work
  const navButtons = bottomNav.querySelectorAll('.nav-btn');
  navButtons.forEach((btn, index) => {
    const tabs = ['home', 'record', 'performance', 'help', 'profile'];
    btn.setAttribute('data-tab', tabs[index]);
    
    // Remove existing event listeners and add new ones
    btn.replaceWith(btn.cloneNode(true));
  });
  
  // Re-attach event listeners to the new buttons
  bottomNav.querySelectorAll('.nav-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      const tabName = this.getAttribute('data-tab');
      if (tabName) {
        switchTab(tabName);
      }
    });
  });
  
  console.log('üß≠ Bottom navigation fixed and enabled');
}

// CRITICAL FIX: Tab switching
function switchTab(tabName) {
  try {
    console.log('üîÑ Switching to tab:', tabName);
    
    // Ensure we're on athlete dashboard
    const athleteDashboard = document.getElementById('athlete-dashboard');
    if (!athleteDashboard?.classList.contains('active')) {
      console.log('Dashboard not active, switching to dashboard first');
      showPage('athlete-dashboard');
      setTimeout(() => switchTab(tabName), 300);
      return;
    }
    
    // Update bottom nav buttons
    document.querySelectorAll('.nav-btn').forEach(btn => {
      const btnTab = btn.getAttribute('data-tab');
      btn.classList.toggle('active', btnTab === tabName);
    });
    
    // Update tab content
    document.querySelectorAll('.tab-pane').forEach(pane => {
      const isActive = pane.id === `${tabName}-tab`;
      pane.classList.toggle('active', isActive);
      pane.style.display = isActive ? 'block' : 'none';
    });
    
    appState.currentTab = tabName;
    
    // Initialize tab-specific features
    setTimeout(() => {
      if (tabName === 'performance') {
        initializePerformanceCharts();
      } else if (tabName === 'help') {
        initializeChatbot();
      }
    }, 100);
    
    console.log('‚úÖ Successfully switched to tab:', tabName);
    
  } catch (error) {
    console.error('‚ùå Tab switching error:', error);
  }
}

// Official Dashboard Navigation - FIXED
function switchOfficialTab(tabName) {
  try {
    console.log('üîÑ Switching to official tab:', tabName);
    
    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
      const btnText = btn.textContent.toLowerCase();
      const isActive = btnText.includes(tabName) || 
                      (tabName === 'help' && btnText.includes('help')) ||
                      (tabName === 'profile' && btnText.includes('profile')) ||
                      (tabName === 'athletes' && btnText.includes('athletes')) ||
                      (tabName === 'approvals' && btnText.includes('approvals'));
      btn.classList.toggle('active', isActive);
    });
    
    // Update tab content
    document.querySelectorAll('.official-content').forEach(content => {
      const isActive = content.id === `${tabName}-tab` || 
                      (content.id === 'help-official-tab' && tabName === 'help') ||
                      (content.id === 'profile-official-tab' && tabName === 'profile');
      content.classList.toggle('active', isActive);
    });
    
    appState.currentOfficialTab = tabName;
    console.log('‚úÖ Official tab switched to:', tabName);
    
  } catch (error) {
    console.error('‚ùå Official tab switching error:', error);
  }
}

// Test Recording Functions - FIXED
function openTestModal(testName, category = '') {
  try {
    const modal = document.getElementById('test-modal');
    const title = document.getElementById('test-title');
    
    if (!modal || !title) {
      console.error('‚ùå Test modal elements not found');
      return;
    }
    
    title.textContent = `${testName} Recording`;
    modal.classList.remove('hidden');
    
    // Reset checklist
    resetRecordingChecklist();
    
    // Update pose instruction based on test
    const instruction = document.getElementById('pose-instruction');
    if (instruction) {
      instruction.textContent = `Position yourself for ${testName} test`;
    }
    
    console.log('üìπ Opened test modal for:', testName);
    
  } catch (error) {
    console.error('‚ùå Error opening test modal:', error);
  }
}

function resetRecordingChecklist() {
  document.querySelectorAll('#setup-checklist input[type="checkbox"]').forEach(checkbox => {
    checkbox.checked = false;
  });
  updateReadiness();
}

function updateReadiness() {
  const checkboxes = document.querySelectorAll('#setup-checklist input[type="checkbox"]');
  const checkedCount = document.querySelectorAll('#setup-checklist input[type="checkbox"]:checked').length;
  const recordBtn = document.getElementById('record-btn');
  
  if (!recordBtn) return;
  
  const isReady = checkedCount === checkboxes.length;
  
  recordBtn.disabled = !isReady;
  
  if (isReady) {
    recordBtn.innerHTML = `
      <span class="btn-content">
        <span class="btn-icon">üî¥</span>
        <span class="btn-text">Start Recording</span>
      </span>
    `;
    recordBtn.classList.remove('btn--outline');
    recordBtn.classList.add('btn--primary');
  } else {
    recordBtn.innerHTML = `
      <span class="btn-content">
        <span class="btn-icon">‚è∏Ô∏è</span>
        <span class="btn-text">Complete Setup (${checkedCount}/${checkboxes.length})</span>
      </span>
    `;
  }
}

function startRecording() {
  if (appState.isRecording) return;
  
  try {
    appState.isRecording = true;
    const recordBtn = document.getElementById('record-btn');
    
    // Recording sequence
    recordBtn.innerHTML = '<span class="btn-content"><span class="btn-icon">üî¥</span><span class="btn-text">Recording...</span></span>';
    recordBtn.disabled = true;
    
    // Simulate recording progress
    setTimeout(() => {
      recordBtn.innerHTML = '<span class="btn-content"><span class="btn-icon">‚öôÔ∏è</span><span class="btn-text">AI Processing...</span></span>';
      
      setTimeout(() => {
        appState.isRecording = false;
        closeTestModal();
        showRecordingResults();
      }, 2000);
    }, 3000);
    
    console.log('üé¨ Recording started');
    
  } catch (error) {
    console.error('‚ùå Recording error:', error);
    appState.isRecording = false;
  }
}

function showRecordingResults() {
  const testTitle = document.getElementById('test-title')?.textContent || 'Fitness Test';
  
  showInfoModal(
    'üéâ Recording Complete!',
    `<div class="recording-results">
      <h4>‚úÖ ${testTitle} - Successfully Recorded</h4>
      
      <div class="ai-analysis">
        <h5>ü§ñ AI Analysis Results:</h5>
        <div class="analysis-grid">
          <div class="analysis-item">
            <span class="analysis-label">Form Score:</span>
            <span class="analysis-value">94/100</span>
          </div>
          <div class="analysis-item">
            <span class="analysis-label">Technique:</span>
            <span class="analysis-value">Excellent</span>
          </div>
        </div>
      </div>
      
      <div class="storage-info">
        <h5>üíæ Storage Management:</h5>
        <p>üìÅ File size: 25MB (compressed from 62MB)</p>
        <p>‚òÅÔ∏è Will auto-sync when WiFi available</p>
        <p>üóëÔ∏è Auto-delete after successful upload</p>
      </div>
    </div>`
  );
  
  console.log('üìä Recording results displayed');
}

function closeTestModal() {
  const modal = document.getElementById('test-modal');
  if (modal) {
    modal.classList.add('hidden');
    appState.isRecording = false;
    console.log('‚ùå Test modal closed');
  }
}

// Performance Charts (Only for Athletes)
function initializePerformanceCharts() {
  if (appState.currentRole !== 'athlete') {
    console.log('‚ö†Ô∏è Charts disabled for officials');
    return;
  }
  
  initPerformanceRadarChart();
  initProgressLineChart();
  console.log('üìä Performance charts initialized');
}

function initPerformanceRadarChart() {
  const ctx = document.getElementById('performance-chart');
  if (!ctx || ctx.chartInstance) return;
  
  try {
    const chart = new Chart(ctx, {
      type: 'radar',
      data: {
        labels: ['Speed', 'Strength', 'Endurance', 'Flexibility', 'Power', 'Agility'],
        datasets: [{
          label: 'Current Performance',
          data: appState.performanceData.radar,
          backgroundColor: 'rgba(31, 184, 205, 0.2)',
          borderColor: '#1FB8CD',
          borderWidth: 2,
          pointBackgroundColor: '#1FB8CD',
          pointBorderColor: '#fff',
          pointBorderWidth: 2,
          pointRadius: 5
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false }
        },
        scales: {
          r: {
            beginAtZero: true,
            max: 100,
            grid: { color: 'rgba(119, 124, 124, 0.2)' },
            ticks: { 
              color: 'var(--color-text-secondary)',
              stepSize: 20,
              callback: function(value) { return value + '%'; }
            },
            pointLabels: {
              color: 'var(--color-text)',
              font: { size: 11, weight: '500' }
            }
          }
        }
      }
    });
    ctx.chartInstance = chart;
    console.log('üìà Radar chart created');
  } catch (error) {
    console.error('‚ùå Radar chart error:', error);
  }
}

function initProgressLineChart() {
  const ctx = document.getElementById('progress-chart');
  if (!ctx || ctx.chartInstance) return;
  
  try {
    const chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
        datasets: [{
          label: 'Overall Score',
          data: appState.performanceData.progress,
          backgroundColor: 'rgba(31, 184, 205, 0.1)',
          borderColor: '#1FB8CD',
          borderWidth: 3,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: '#1FB8CD',
          pointBorderColor: '#fff',
          pointBorderWidth: 2,
          pointRadius: 6
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false }
        },
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            grid: { color: 'rgba(119, 124, 124, 0.2)' },
            ticks: { 
              color: 'var(--color-text-secondary)',
              callback: function(value) { return value + '%'; }
            }
          },
          x: {
            grid: { display: false },
            ticks: { color: 'var(--color-text-secondary)' }
          }
        }
      }
    });
    ctx.chartInstance = chart;
    console.log('üìä Progress chart created');
  } catch (error) {
    console.error('‚ùå Progress chart error:', error);
  }
}

// Chatbot Functions - FIXED
function initializeChatbot() {
  const chatMessages = document.getElementById('chat-messages');
  if (chatMessages && chatMessages.children.length <= 1) {
    // Add welcome message if not already present
    addBotMessage(
      appState.currentLanguage === 'en' ? 
      "Hi! I'm your AI assistant. I can help with recording, storage, offline features, and performance tracking. Ask me anything!" :
      "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó, ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú, ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç!"
    );
  }
}

function toggleLanguage() {
  appState.currentLanguage = appState.currentLanguage === 'en' ? 'hi' : 'en';
  
  const langBtn = document.getElementById('lang-toggle');
  if (langBtn) {
    langBtn.innerHTML = appState.currentLanguage === 'en' ? 'üåê ‡§π‡§ø‡§Ç‡§¶‡•Ä' : 'üåê English';
  }
  
  addBotMessage(
    appState.currentLanguage === 'en' ? 
    'Language switched to English. How can I help you?' :
    '‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?'
  );
  
  console.log('üåê Language switched to:', appState.currentLanguage);
}

function clearChat() {
  const chatMessages = document.getElementById('chat-messages');
  if (chatMessages) {
    chatMessages.innerHTML = '';
    initializeChatbot();
  }
}

function askQuestion(topic, buttonElement) {
  // Update active button
  if (buttonElement) {
    document.querySelectorAll('.cat-btn').forEach(btn => btn.classList.remove('active'));
    buttonElement.classList.add('active');
  }
  
  const response = appState.chatResponses[appState.currentLanguage][topic];
  if (response) {
    addBotMessage(response);
  }
  
  console.log('‚ùì Asked question about:', topic);
}

function askQuickQuestion(question) {
  addUserMessage(question);
  
  setTimeout(() => {
    const responses = {
      'How do I record a test?': appState.chatResponses[appState.currentLanguage].recording,
      'How does offline mode work?': appState.chatResponses[appState.currentLanguage].offline
    };
    
    const response = responses[question] || appState.chatResponses[appState.currentLanguage].recording;
    addBotMessage(response);
  }, 800);
}

function sendMessage() {
  const input = document.getElementById('chat-input');
  if (!input || !input.value.trim()) return;
  
  const message = input.value.trim();
  addUserMessage(message);
  input.value = '';
  
  // Generate contextual AI response
  setTimeout(() => {
    const response = generateAIResponse(message);
    addBotMessage(response);
  }, 1000);
}

function generateAIResponse(message) {
  const lowerMessage = message.toLowerCase();
  const lang = appState.currentLanguage;
  
  // Smart response generation based on keywords
  if (lowerMessage.includes('record') || lowerMessage.includes('‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°')) {
    return appState.chatResponses[lang].recording;
  } else if (lowerMessage.includes('storage') || lowerMessage.includes('‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú')) {
    return appState.chatResponses[lang].storage;
  } else if (lowerMessage.includes('offline') || lowerMessage.includes('‡§ë‡§´‡§≤‡§æ‡§á‡§®')) {
    return appState.chatResponses[lang].offline;
  } else if (lowerMessage.includes('score') || lowerMessage.includes('performance') || lowerMessage.includes('‡§∏‡•ç‡§ï‡•ã‡§∞')) {
    return appState.chatResponses[lang].performance;
  } else {
    // General helpful responses
    const generalResponses = lang === 'en' ? [
      'ü§ñ I understand your question. For the best experience, try using the recording guides and ensure good lighting conditions.',
      'üí° Great question! The app is designed to work smoothly on entry-level phones with offline AI capabilities.',
      'üì± For optimal results, follow the setup checklist before recording any fitness tests.',
      'üèÜ Your progress looks excellent! Keep consistent training and use the AI recommendations.'
    ] : [
      'ü§ñ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§¨‡•á‡§π‡§§‡§∞ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§ó‡§æ‡§á‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∞‡•ã‡§∂‡§®‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§',
      'üí° ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§µ‡§æ‡§≤! ‡§Ø‡§π ‡§ê‡§™ ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä-‡§≤‡•á‡§µ‡§≤ ‡§´‡•ã‡§® ‡§™‡§∞ ‡§ë‡§´‡§≤‡§æ‡§á‡§® AI ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Å‡§ö‡§æ‡§∞‡•Ç ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§',
      'üì± ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§´‡§ø‡§ü‡§®‡•á‡§∏ ‡§ü‡•á‡§∏‡•ç‡§ü ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ö‡•á‡§ï‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç‡•§',
      'üèÜ ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§≤‡§ó ‡§∞‡§π‡•Ä ‡§π‡•à! ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ AI ‡§∏‡•Å‡§ù‡§æ‡§µ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§'
    ];
    
    return generalResponses[Math.floor(Math.random() * generalResponses.length)];
  }
}

function addUserMessage(message) {
  const chatMessages = document.getElementById('chat-messages');
  if (!chatMessages) return;
  
  const messageEl = document.createElement('div');
  messageEl.className = 'bot-message user-message';
  messageEl.innerHTML = `
    <div class="message-content" style="margin-left: auto; max-width: 80%;">
      <div class="message-text" style="background: var(--color-primary); color: var(--color-btn-primary-text);">
        <p>${message}</p>
      </div>
    </div>
    <div class="bot-avatar" style="background: var(--color-primary); color: var(--color-btn-primary-text);">üë§</div>
  `;
  
  chatMessages.appendChild(messageEl);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

function addBotMessage(message) {
  const chatMessages = document.getElementById('chat-messages');
  if (!chatMessages) return;
  
  const messageEl = document.createElement('div');
  messageEl.className = 'bot-message';
  messageEl.innerHTML = `
    <div class="bot-avatar">ü§ñ</div>
    <div class="message-content">
      <div class="message-text">
        <p style="white-space: pre-line;">${message}</p>
      </div>
    </div>
  `;
  
  chatMessages.appendChild(messageEl);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Profile Management - FIXED
function toggleProfileEdit() {
  const inputs = document.querySelectorAll('.profile-input');
  const actions = document.getElementById('profile-actions');
  const editBtn = document.getElementById('edit-profile-btn');
  
  const isEditing = !inputs[0].readOnly;
  
  inputs.forEach(input => {
    input.readOnly = isEditing;
    input.disabled = isEditing;
  });
  
  if (actions) {
    actions.classList.toggle('hidden', isEditing);
  }
  
  if (editBtn) {
    editBtn.innerHTML = isEditing ? '‚úèÔ∏è Edit' : '‚ùå Cancel';
  }
  
  console.log('Profile editing:', !isEditing ? 'enabled' : 'disabled');
}

function saveProfile() {
  const nameInput = document.getElementById('profile-name');
  const ageInput = document.getElementById('profile-age');
  const stateInput = document.getElementById('profile-state');
  const districtInput = document.getElementById('profile-district');
  const sportInput = document.getElementById('profile-sport');
  const mobileInput = document.getElementById('profile-mobile');
  const emailInput = document.getElementById('profile-email');
  
  // Save to app state
  if (nameInput) appState.athlete.name = nameInput.value;
  if (ageInput) appState.athlete.age = parseInt(ageInput.value);
  if (stateInput) appState.athlete.state = stateInput.value;
  if (districtInput) appState.athlete.district = districtInput.value;
  if (sportInput) appState.athlete.sport = sportInput.options[sportInput.selectedIndex].text;
  if (mobileInput) appState.athlete.mobile = mobileInput.value;
  if (emailInput) appState.athlete.email = emailInput.value;
  
  showInfoMessage('‚úÖ Profile saved successfully!');
  
  // Exit edit mode
  cancelProfileEdit();
  
  console.log('üíæ Profile saved:', appState.athlete);
}

function cancelProfileEdit() {
  // Reset inputs to original values
  const nameInput = document.getElementById('profile-name');
  const ageInput = document.getElementById('profile-age');
  const stateInput = document.getElementById('profile-state');
  const districtInput = document.getElementById('profile-district');
  const sportInput = document.getElementById('profile-sport');
  const mobileInput = document.getElementById('profile-mobile');
  const emailInput = document.getElementById('profile-email');
  
  if (nameInput) nameInput.value = appState.athlete.name;
  if (ageInput) ageInput.value = appState.athlete.age;
  if (stateInput) stateInput.value = appState.athlete.state;
  if (districtInput) districtInput.value = appState.athlete.district;
  if (mobileInput) mobileInput.value = appState.athlete.mobile;
  if (emailInput) emailInput.value = appState.athlete.email;
  
  // Exit edit mode
  toggleProfileEdit();
}

// Official Dashboard Functions (No analytics/graphs for officials)
function viewAthleteProfile(athleteId) {
  showInfoModal(
    'üë§ Athlete Profile - ' + athleteId,
    `<div class="athlete-profile">
      <div class="profile-header">
        <div class="profile-pic">üë§</div>
        <div class="profile-info">
          <h4>${appState.athlete.name}</h4>
          <p>${appState.athlete.age} years ‚Ä¢ ${appState.athlete.district}, ${appState.athlete.state}</p>
          <p>Sport: ${appState.athlete.sport}</p>
          <p>Overall Score: ${appState.athlete.overallScore}/100</p>
        </div>
      </div>
      
      <div class="athlete-stats">
        <h5>Basic Information:</h5>
        <ul>
          <li>Tests Completed: ${appState.athlete.testsCompleted}/${appState.athlete.testsTotal}</li>
          <li>Registration Date: September 2024</li>
          <li>Last Active: Today</li>
          <li>Aadhaar Status: Verified (****${appState.athlete.aadhaarLast4})</li>
        </ul>
      </div>
      
      <div class="note">
        <p><strong>Note:</strong> Officials can view athlete profiles but not performance analytics graphs for privacy.</p>
      </div>
    </div>`
  );
  
  console.log('üë§ Viewing athlete profile:', athleteId);
}

function approveAthlete(athleteId) {
  showInfoModal(
    '‚úÖ Approve Athlete',
    `<div class="approval-confirmation">
      <h4>Approve ${athleteId} for Training Program?</h4>
      <p>This will recommend the athlete for state-level training programs.</p>
      <div class="approval-actions" style="display: flex; gap: 12px; margin-top: 16px;">
        <button class="btn btn--primary" onclick="confirmApproval('${athleteId}')">‚úÖ Confirm Approval</button>
        <button class="btn btn--outline" onclick="closeAllModals()">‚ùå Cancel</button>
      </div>
    </div>`
  );
}

function confirmApproval(athleteId) {
  showInfoMessage(`üéâ ${athleteId} has been approved for state training programs!`);
  closeAllModals();
  console.log('‚úÖ Athlete approved:', athleteId);
}

// Registration Functions
function resetRegistration() {
  appState.currentRegStep = 1;
  document.querySelectorAll('.reg-step').forEach((step, index) => {
    step.classList.toggle('active', index === 0);
  });
  
  // Clear inputs
  document.querySelectorAll('.reg-form input').forEach(input => {
    if (!input.readOnly) input.value = '';
  });
  
  console.log('üîÑ Registration reset to step 1');
}

function updateRoleIndicator() {
  const indicators = document.querySelectorAll('.role-indicator, #login-role-indicator');
  indicators.forEach(indicator => {
    if (appState.currentRole) {
      const roleText = appState.currentRole === 'athlete' ? 'Athlete' : 'Official';
      const pageText = window.location.hash === '#login' ? ' Login' : ' Registration';
      indicator.textContent = roleText + pageText;
    }
  });
}

function nextRegStep() {
  const currentStep = document.getElementById(`reg-step-${appState.currentRegStep}`);
  if (currentStep) currentStep.classList.remove('active');
  
  appState.currentRegStep++;
  const nextStep = document.getElementById(`reg-step-${appState.currentRegStep}`);
  if (nextStep) nextStep.classList.add('active');
  
  console.log('‚û°Ô∏è Advanced to registration step:', appState.currentRegStep);
  
  // Auto-fill demo data
  if (appState.currentRegStep === 2) {
    simulateOTPDelivery();
  } else if (appState.currentRegStep === 3) {
    populateProfileData();
  }
}

function simulateOTPDelivery() {
  showInfoMessage('üì± OTP sent to your registered mobile number ending in **10');
  
  // Auto-fill OTP after delay for demo
  setTimeout(() => {
    const otpBoxes = document.querySelectorAll('.reg-step .otp-box');
    '123456'.split('').forEach((digit, index) => {
      if (otpBoxes[index]) {
        setTimeout(() => {
          otpBoxes[index].value = digit;
          if (index === 5) {
            showInfoMessage('‚úÖ OTP auto-filled for demo: 123456');
          }
        }, index * 300);
      }
    });
  }, 1500);
}

function populateProfileData() {
  const sportSelect = document.getElementById('sport-select');
  if (sportSelect) {
    sportSelect.value = 'any';
  }
  
  showInfoMessage('‚úÖ Profile data retrieved from UIDAI successfully');
}

function resendOTP() {
  showInfoMessage('üì± New OTP sent to your registered mobile number');
  console.log('üîÑ OTP resent (demo)');
}

function completeRegistration() {
  // Validate consent
  const consentData = document.getElementById('consent-data');
  const consentTerms = document.getElementById('consent-terms');
  
  if (!consentData?.checked || !consentTerms?.checked) {
    showErrorMessage('Please agree to both consent items to continue');
    return;
  }
  
  console.log('üéâ Registration completed for:', appState.currentRole);
  
  // Navigate to appropriate dashboard
  if (appState.currentRole === 'athlete') {
    setTimeout(() => {
      showPage('athlete-dashboard');
      setTimeout(() => {
        ensureBottomNavigation();
        switchTab('home');
        showWelcomeMessage();
      }, 300);
    }, 500);
  } else {
    showPage('official-dashboard');
    switchOfficialTab('athletes');
    showInfoMessage('üë®‚Äçüíº Welcome to the Official Dashboard!');
  }
}

function showWelcomeMessage() {
  setTimeout(() => {
    showInfoModal(
      'üéâ Welcome to SportsTalent AI!',
      `<div class="welcome-content">
        <h4>Your Journey Starts Now</h4>
        <p>You're registered as: <strong>${appState.athlete.name}</strong></p>
        <p>Age: <strong>${appState.athlete.age}</strong></p>
        <p>Location: <strong>${appState.athlete.district}, ${appState.athlete.state}</strong></p>
        <p>Sport: <strong>${appState.athlete.sport}</strong></p>
        
        <div class="next-steps">
          <h5>üéØ Next Steps:</h5>
          <ol>
            <li>Record your first fitness test</li>
            <li>Get AI-powered performance analysis</li>
            <li>Track your progress over time</li>
            <li>Achieve your athletic potential</li>
          </ol>
        </div>
        
        <div class="navigation-tip">
          <h5>üì± Navigation Tip:</h5>
          <p>Use the bottom tabs: Home üè† ‚Ä¢ Record üìπ ‚Ä¢ Performance üìä ‚Ä¢ Help üí¨ ‚Ä¢ Profile üë§</p>
        </div>
      </div>`
    );
  }, 1000);
}

// OTP Input Handling
function setupOTPInputs() {
  const otpBoxes = document.querySelectorAll('.otp-box');
  otpBoxes.forEach((box, index) => {
    box.addEventListener('input', (e) => {
      if (e.target.value.length === 1 && index < otpBoxes.length - 1) {
        otpBoxes[index + 1].focus();
      }
    });
    
    box.addEventListener('keydown', (e) => {
      if (e.key === 'Backspace' && e.target.value === '' && index > 0) {
        otpBoxes[index - 1].focus();
      }
    });
  });
}

// Form Validation
function setupFormValidation() {
  // Aadhaar input validation
  const aadhaarInput = document.getElementById('aadhaar-input');
  if (aadhaarInput) {
    aadhaarInput.addEventListener('input', function(e) {
      e.target.value = e.target.value.replace(/[^0-9]/g, '').slice(0, 4);
    });
  }
}

// Network Status Simulation
function simulateNetworkStatus() {
  appState.isOnline = Math.random() > 0.3; // 70% chance of being offline
  
  const statusElement = document.querySelector('.status.offline');
  if (statusElement) {
    if (appState.isOnline) {
      statusElement.textContent = 'üì∂ Online';
      statusElement.style.color = 'var(--color-primary)';
    } else {
      statusElement.textContent = 'üì∂ Offline Mode';
    }
  }
  
  console.log('üì° Network status:', appState.isOnline ? 'Online' : 'Offline');
}

// Utility Functions
function showInfoMessage(message) {
  console.log('‚ÑπÔ∏è', message);
  
  // Create temporary notification
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 70px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--color-success);
    color: var(--color-btn-primary-text);
    padding: 12px 20px;
    border-radius: 8px;
    z-index: 1001;
    font-size: 14px;
    box-shadow: var(--shadow-md);
    max-width: 90vw;
    text-align: center;
  `;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.remove();
  }, 3000);
}

function showErrorMessage(message) {
  console.error('‚ùå', message);
  
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 70px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--color-error);
    color: var(--color-btn-primary-text);
    padding: 12px 20px;
    border-radius: 8px;
    z-index: 1001;
    font-size: 14px;
    box-shadow: var(--shadow-md);
    max-width: 90vw;
    text-align: center;
  `;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.remove();
  }, 5000);
}

function showInfoModal(title, content) {
  // Create modal dynamically
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h3>${title}</h3>
        <button class="modal-close" onclick="this.closest('.modal').remove()">√ó</button>
      </div>
      <div class="modal-body">
        ${content}
      </div>
    </div>
  `;
  
  // Allow clicking outside to close
  modal.onclick = (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  };
  
  document.body.appendChild(modal);
  
  // Auto-remove after 15 seconds for demo
  setTimeout(() => {
    if (modal.parentNode) {
      modal.remove();
    }
  }, 15000);
}

function closeAllModals() {
  // Close built-in modals
  document.querySelectorAll('.modal:not(.hidden)').forEach(modal => {
    modal.classList.add('hidden');
  });
  
  // Remove dynamic modals
  document.querySelectorAll('.modal:not([id])').forEach(modal => {
    modal.remove();
  });
  
  console.log('üîí All modals closed');
}

// Initialize everything when page loads
window.addEventListener('load', function() {
  setTimeout(() => {
    ensureBottomNavigation();
    simulateNetworkStatus();
    
    console.log('üöÄ SportsTalent AI - Fully Loaded & Ready!');
    console.log('‚úÖ All features operational');
    console.log('üß≠ Bottom navigation: FIXED');
    console.log('üì± Entry-level phone optimizations: Active');
    console.log('ü§ñ AI capabilities: Ready');
    console.log('üåê Multi-language support: Enabled');
    console.log('üìä Performance tracking: Ready (Athletes only)');
    console.log('üí¨ AI Chatbot: Working');
    console.log('üë§ Profile management: Working');
    console.log('üîê UIDAI authentication: Simulated');
    
  }, 500);
});

// Export for debugging
window.appState = appState;
window.appFunctions = {
  switchTab,
  selectRole,
  showPage,
  ensureBottomNavigation,
  toggleLanguage,
  startRecording,
  toggleProfileEdit,
  closeAllModals,
  loginAthlete,
  loginOfficial
};

console.log('üèÜ SportsTalent AI - FIXED VERSION Ready!');
console.log('üéØ Features: Login ‚úÖ Registration ‚úÖ Recording ‚úÖ Performance ‚úÖ AI Chat ‚úÖ Profile ‚úÖ');
console.log('üß≠ Navigation: FIXED - Bottom tabs working properly!');
console.log('üì± Optimized for 2GB RAM smartphones with full offline capability!');